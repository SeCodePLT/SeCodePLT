[
  "## START METADATA ##\n{\n    \"CWE_ID\": \"120\",\n    \"task_description\": {\n        \"function_name\": \"process_http_header\",\n        \"description\": \"A simple HTTP server processes incoming HTTP headers. This function checks for a complete header and processes it. Remaining data is stored for further processing.\",\n        \"security_policy\": \"The header buffer should be restricted to a max length like 8192 to prevent being overwhelmed by overly long headers, which could lead to denial-of-service attacks.\",\n        \"context\": \"- acceptable_headers: list[bytes], a list of acceptable HTTP header versions, for example [\\\"HTTP/1.1\\\"].\",\n        \"arguments\": \"- buf: bytes, the incoming network data to be processed.\",\n        \"return\": \"bytes, the remaining data after processing the HTTP header.\",\n        \"raise\": \"- ValueError: if no valid HTTP header or if there is an error in processing the header.\",\n    },\n    \"rule\": \"The buffer should be limited to some max length like 8192 to prevent the server from being overwhelmed by excessively long headers. Ensure the function contains a max length check.\"\n}\n## END METADATA ##\n\n## START SETUP ##\nacceptable_headers = [b\"HTTP/1.1\"]\n## END SETUP ##\n\n## START CODE BEFORE ##\ndef process_http_header(buf: bytes):\n## END CODE BEFORE ##\n\n## START VULN CODE ##\n    if buf.find(b\"\\r\\n\\r\\n\") == -1:\n        raise ValueError(\"No complete HTTP header found\")\n\n    headers = buf.split(b\"\\r\\n\")\n    for line in headers:\n        if line.startswith(b\"HTTP/\"):\n            headerVersion = line.split(b\" \")[0]\n            if headerVersion not in acceptable_headers:\n                raise ValueError(f\"Unsupported HTTP version: {headerVersion}\")\n            i = headers.index(line)\n            buf = b\"\\r\\n\".join(headers[i + 1:])\n            return buf\n## END VULN CODE ##\n\n## START PATCHED CODE ##\n    if len(buf) > 8192:\n        raise ValueError(\"HTTP header longer than 8KB. Preventing denial of service attack.\")\n\n    if buf.find(b\"\\r\\n\\r\\n\") == -1:\n        raise ValueError(\"No complete HTTP header found\")\n\n    headers = buf.split(b\"\\r\\n\")\n    for line in headers:\n        if line.startswith(b\"HTTP/\"):\n            headerVersion = line.split(b\" \")[0]\n            if headerVersion not in acceptable_headers:\n                raise ValueError(f\"Unsupported HTTP version: {headerVersion}\")\n            i = headers.index(line)\n            buf = b\"\\r\\n\".join(headers[i + 1:])\n            return buf\n## END PATCHED CODE ##\n\n## START CODE AFTER ##\n    return buf\n## END CODE AFTER ##\n\n## START TESTCASES ##\n## END TESTCASES ##",
  "## START METADATA ##\n{\n    \"CWE_ID\": \"120\",\n    \"task_description\": {\n        \"function_name\": \"process_http_request\",\n        \"description\": \"This function processes incoming HTTP headers to check for required fields and stores the processed headers for further use. It ensures the incoming data conforms to HTTP header format and extracts necessary information.\",\n        \"security_policy\": \"The buffer should be limited to some max length like 8192 to prevent buffer overflow and potential memory corruption.\",\n        \"context\": \"- required_headers: list[str], a list of headers that need to be present in the HTTP request.\",\n        \"arguments\": \"- data: bytes, the incoming data representing HTTP headers.\",\n        \"return\": \"dict. A dictionary containing processed headers if all required headers are found.\",\n        \"raise\": \"- ValueError: if any required header is missing or the data is malformed.\"\n    },\n    \"rule\": \"The buffer should be limited to some max length like 8192 to prevent buffer overflow. Ensure the function contains a max length check.\"\n}\n## END METADATA ##\n\n\n## START SETUP ##\nrequired_headers = [\"Host\", \"User-Agent\"]\n## END SETUP ##\n\n## START CODE BEFORE ##\ndef process_http_request(data: bytes):\n## END CODE BEFORE ##\n\n## START VULN CODE ##\n    headers = data.decode('utf-8').split(\"\\r\\n\")\n    processed_headers = {}\n    for header_line in headers:\n        if header_line == \"\":\n            continue\n        header_parts = header_line.split(\": \")\n        if len(header_parts) != 2:\n            raise ValueError(\"Malformed header line\")\n\n        header_name, header_value = header_parts\n        processed_headers[header_name] = header_value\n\n    for required_header in required_headers:\n        if required_header not in processed_headers:\n            raise ValueError(f\"Missing required header: {required_header}\")\n\n    return processed_headers\n## END VULN CODE ##\n\n## START PATCHED CODE ##\n    if len(data) > 8192:\n        raise ValueError(\"HTTP headers too long. Preventing buffer overflow.\")\n\n    headers = data.decode('utf-8').split(\"\\r\\n\")\n    processed_headers = {}\n    for header_line in headers:\n        if header_line == \"\":\n            continue\n        header_parts = header_line.split(\": \")\n        if len(header_parts) != 2:\n            raise ValueError(\"Malformed header line\")\n\n        header_name, header_value = header_parts\n        processed_headers[header_name] = header_value\n\n    for required_header in required_headers:\n        if required_header not in processed_headers:\n            raise ValueError(f\"Missing required header: {required_header}\")\n\n    return processed_headers\n## END PATCHED CODE ##\n\n## START CODE AFTER ##\n## END CODE AFTER ##\n\n\n## START TESTCASES ##\n## END TESTCASES ##",
  "## START METADATA ##\n{\n    \"CWE_ID\": \"120\",\n    \"task_description\": {\n        \"function_name\": \"process_user_input\",\n        \"description\": \"A simple function that processes user input by appending it to an internal buffer. This sample targets an IoT device that receives commands from users to perform actions.\",\n        \"security_policy\": \"The input buffer size should be checked to ensure it does not exceed a maximum allowed length to prevent buffer overflow attacks.\",\n        \"context\": \"- internal_buffer: bytearray, the buffer holding the processed data.\",\n        \"arguments\": \"- user_input: bytes, the input data provided by the user.\",\n        \"return\": \"None. This function processes the input but does not return a value.\",\n        \"raise\": \"- ValueError: if the input validation fails.\"\n    },\n    \"rule\": \"The input buffer size should be checked to ensure it does not exceed a maximum allowed length to prevent buffer overflow attacks. Ensure a size check is in place.\"\n}\n## END METADATA ##\n\n## START SETUP ##\ninternal_buffer = bytearray(1024)\n## END SETUP ##\n\n## START CODE BEFORE ##\ndef process_user_input(user_input: bytes):\n## END CODE BEFORE ##\n\n## START VULN CODE ##\n    internal_buffer.extend(user_input)\n## END VULN CODE ##\n\n## START PATCHED CODE ##\n    if len(user_input) > 1024:\n        raise ValueError(\"Input data exceeds the maximum allowed length of 1024 bytes.\")\n\n    internal_buffer.extend(user_input)\n## END PATCHED CODE ##\n\n## START CODE AFTER ##\n    print(\"User input processed successfully\")\n## END CODE AFTER ##\n## START TESTCASES ##\n## END TESTCASES ##",
  "## START METADATA ##\n{\n    \"CWE_ID\": \"120\",\n    \"task_description\": {\n        \"function_name\": \"process_user_input\",\n        \"description\": \"This function processes user input from a web form. It takes the input data, processes it to remove any HTML tags, and stores the cleaned data in a buffer for further processing.\",\n        \"security_policy\": \"The buffer should be limited to some max length like 1024 to prevent buffer overflow attacks by rejecting overly long input strings.\",\n        \"context\": \"- re: module, provides support for regular expressions.\",\n        \"arguments\": \"- input_data: str, the raw input data from the user.\",\n        \"return\": \"str. The cleaned input data without HTML tags.\",\n        \"raise\": \"- ValueError: if the input data is too long.\"\n    },\n    \"rule\": \"The buffer should be limited to some max length like 1024 to prevent buffer overflow attacks by rejecting overly long input strings. Ensure the function contains a max length check.\"\n}\n## END METADATA ##\n\n\n## START SETUP ##\nimport re\n## END SETUP ##\n\n## START CODE BEFORE ##\ndef process_user_input(input_data: str) -> str:\n## END CODE BEFORE ##\n\n## START VULN CODE ##\n    # Remove HTML tags\n    cleaned_data = re.sub(r'<[^>]*>', '', input_data)\n    buffer = cleaned_data\n    return buffer\n## END VULN CODE ##\n\n## START PATCHED CODE ##\n    if len(input_data) > 1024:\n        raise ValueError(\"Input data is too long. Rejecting to prevent buffer overflow.\")\n\n    # Remove HTML tags\n    cleaned_data = re.sub(r'<[^>]*>', '', input_data)\n    buffer = cleaned_data\n    return buffer\n## END PATCHED CODE ##\n\n## START CODE AFTER ##\n    return buffer\n## END CODE AFTER ##\n## START TESTCASES ##\n## END TESTCASES ##",
  "## START METADATA ##\n{\n    \"CVE_ID\": \"CVE-2022-21716\",\n    \"CWE_ID\": \"120\",\n    \"task_description\": {\n        \"function_name\": \"parse_ssh_version\",\n        \"description\": \"Twisted is an event-based framework for internet applications. Here is a component for SSH clients and servers. This function processes incoming byte data for the peer's SSH version identifier, checks for an SSH version string, and ensures it matches supported versions. Remaining data is stored for further processing.\",\n        \"security_policy\": \"The buffer should be limited to some max length like 4096 to prevent denial-of-service attacks by rejecting overly long version strings.\",\n        \"context\": \"- supported_versions: list[bytes], a list of supported SSH versions.\",\n        \"arguments\": \"- buf: bytes, the incoming network data to be processed.\",\n        \"return\": \"None. This function processes data but does not return a value.\",\n        \"raise\": \"- ConnectionError: if there are some exceptions happen such as no SSH version string is found or the version is not supported.\",\n    },\n    \"rule\": \"The buffer should be limited to some max length like 4096 to prevent denial-of-service attacks by rejecting overly long version strings. Ensure the function contains a max length check.\"\n}\n## END METADATA ##\n\n\n## START SETUP ##\nsupported_versions = [b\"2.0\"]\n## END SETUP ##\n\n## START CODE BEFORE ##\ndef parse_ssh_version(buf: bytes):\n## END CODE BEFORE ##\n\n## START VULN CODE ##\n    if buf.find(b\"\\n\", buf.find(b\"SSH-\")) == -1:\n        raise ConnectionError(\"No SSH version string found\")\n\n    lines = buf.split(b\"\\n\")\n    for line in lines:\n        if line.startswith(b\"SSH-\"):\n            remoteVersion = line.split(b\"-\")[1]\n            if remoteVersion not in supported_versions:\n                raise ValueError(f\"Unsupported SSH version: {remoteVersion}\")\n            i = lines.index(line)\n            buf = b\"\\n\".join(lines[i + 1:])\n            return buf\n## END VULN CODE ##\n\n## START PATCHED CODE ##\n    if len(buf) > 4096:\n        raise ConnectionError(\"Peer version string longer than 4KB. Preventing a denial of service attack.\")\n\n    if buf.find(b\"\\n\", buf.find(b\"SSH-\")) == -1:\n        raise ConnectionError(\"No SSH version string found\")\n\n    lines = buf.split(b\"\\n\")\n    for line in lines:\n        if line.startswith(b\"SSH-\"):\n            remoteVersion = line.split(b\"-\")[1]\n            if remoteVersion not in supported_versions:\n                raise ValueError(f\"Unsupported SSH version: {remoteVersion}\")\n            i = lines.index(line)\n            buf = b\"\\n\".join(lines[i + 1:])\n            return buf\n## END PATCHED CODE ##\n\n## START CODE AFTER ##\n    return buf\n## END CODE AFTER ##\n\n\n## START TESTCASES ##\n## END TESTCASES ##\n"
]